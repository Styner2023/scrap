#!/usr/bin/env python3

#==============================================================================
# Functionality
#==============================================================================
import pdb
import sys
import os
import re

# utility funcs, classes, etc go here.

def asserting(cond):
    if not cond:
        pdb.set_trace()
    assert(cond)

def has_stdin():
    return not sys.stdin.isatty()

def reg(pat, flags=0):
    return re.compile(pat, re.VERBOSE | flags)

#==============================================================================
# Cmdline
#==============================================================================
import argparse

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, 
    description="""
TODO
""")
     
parser.add_argument('-v', '--verbose',
    action="store_true",
    help="verbose output" )

args = None

#==============================================================================
# Main
#==============================================================================

import json
import numpy as np
import tensorflow as tf
import os
import tqdm

from natsort import natsorted


def maketree(path):
  try:
    os.makedirs(path)
  except:
    pass

def numpy2json(arr):
  return json.dumps(arr.tolist())

def tensor2json(ckpt, outdir, name):
  print(os.path.join(outdir, name))
  tensor = ckpt.get_tensor(name)
  maketree(os.path.join(outdir, name))
  with open(os.path.join(outdir, name, 'data.json'), 'w') as f:
    json = numpy2json(tensor)
    print(json, file=f)

def ckpt2json(checkpoint_path):
  ckpt = tf.train.load_checkpoint(checkpoint_path)
  outdir = os.path.basename(checkpoint_path)
  maketree(outdir)
  shapes = ckpt.get_variable_to_shape_map()
  types = {variable: type.name for variable, type in ckpt.get_variable_to_dtype_map().items()}
  names = list(natsorted([name for name, shape in shapes.items()]))
  with open(os.path.join(outdir, 'shapes.jsonl'), 'w') as f:
    for name in names:
      print(json.dumps([name, shapes[name]]), file=f)
  with open(os.path.join(outdir, 'types.jsonl'), 'w') as f:
    for name in names:
      print(json.dumps([name, types[name]]), file=f)
  for name in tqdm.tqdm(names):
    tensor2json(ckpt, outdir, name)

def run():
    if args.verbose:
        print(args)
    if len(args.args) <= 0 and not has_stdin():
        # if there were no args and there was no input, prompt user.
        print('Enter input (press Ctrl-D when done):')
    if len(args.args) <= 0 or has_stdin():
        indata = sys.stdin.read()
        args.args.extend(indata.splitlines())
    # for each arg on cmdline...
    for arg in args.args:
        ckpt2json(arg)

def main():
    try:
        global args
        if not args:
            args, leftovers = parser.parse_known_args()
            args.args = leftovers
        return run()
    except IOError:
        # http://stackoverflow.com/questions/15793886/how-to-avoid-a-broken-pipe-error-when-printing-a-large-amount-of-formatted-data
        try:
            sys.stdout.close()
        except IOError:
            pass
        try:
            sys.stderr.close()
        except IOError:
            pass

if __name__ == "__main__":
    main()

