#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copied verbatim from https://github.com/soskek/bookcorpus

# Requirements:
#
# beautifulsoup4>=4.6.3
# html2text>=2018.1.9
# blingfire>=0.0.9
# progressbar>=2.5
# lxml>=4.3.2

import re
import os
import sys
import urllib
try:
    from urllib import unquote
except:
    from urllib.parse import unquote
import zipfile

import xml.parsers.expat
import html2text
from glob import glob
from pprint import pprint as pp


class ContainerParser():
    def __init__(self, xmlcontent=None):
        self.rootfile = ""
        self.xml = xmlcontent

    def startElement(self, name, attributes):
        if name == "rootfile":
            self.buffer = ""
            self.rootfile = attributes["full-path"]

    def parseContainer(self):
        parser = xml.parsers.expat.ParserCreate()
        parser.StartElementHandler = self.startElement
        parser.Parse(self.xml, 1)
        return self.rootfile


class BookParser():
    def __init__(self, xmlcontent=None):
        self.xml = xmlcontent
        self.title = ""
        self.author = ""
        self.inTitle = 0
        self.inAuthor = 0
        self.ncx = ""

    def startElement(self, name, attributes):
        if name == "dc:title":
            self.buffer = ""
            self.inTitle = 1
        elif name == "dc:creator":
            self.buffer = ""
            self.inAuthor = 1
        elif name == "item":
            if attributes["id"] == "ncx" or attributes["id"] == "toc" or attributes["id"] == "ncxtoc":
                self.ncx = attributes["href"]

    def characters(self, data):
        if self.inTitle:
            self.buffer += data
        elif self.inAuthor:
            self.buffer += data

    def endElement(self, name):
        if name == "dc:title":
            self.inTitle = 0
            self.title = self.buffer
            self.buffer = ""
        elif name == "dc:creator":
            self.inAuthor = 0
            self.author = self.buffer
            self.buffer = ""

    def parseBook(self):
        parser = xml.parsers.expat.ParserCreate()
        parser.StartElementHandler = self.startElement
        parser.EndElementHandler = self.endElement
        parser.CharacterDataHandler = self.characters
        parser.Parse(self.xml, 1)
        return self.title, self.author, self.ncx


class NavPoint():
    def __init__(self, id=None, playorder=None, level=0, content=None, text=None):
        self.id = id
        self.content = content
        self.playorder = playorder
        self.level = level
        self.text = text


class TocParser():
    def __init__(self, xmlcontent=None):
        self.xml = xmlcontent
        self.currentNP = None
        self.stack = []
        self.inText = 0
        self.toc = []

    def startElement(self, name, attributes):
        # TODO: what to do when no navpoints? Example: https://imgur.com/gAWuSaf
        if name == "navPoint":
            level = len(self.stack)
            self.currentNP = NavPoint(
                attributes["id"], attributes["playOrder"], level)
            self.stack.append(self.currentNP)
            self.toc.append(self.currentNP)
        elif name == "content":
            self.currentNP.content = unquote(attributes["src"])
        elif name == "text":
            self.buffer = ""
            self.inText = 1

    def characters(self, data):
        if self.inText:
            self.buffer += data

    def endElement(self, name):
        if name == "navPoint":
            self.currentNP = self.stack.pop()
        elif name == "text":
            if self.inText and self.currentNP:
                self.currentNP.text = self.buffer
            self.inText = 0

    def parseToc(self):
        parser = xml.parsers.expat.ParserCreate()
        parser.StartElementHandler = self.startElement
        parser.EndElementHandler = self.endElement
        parser.CharacterDataHandler = self.characters
        parser.Parse(self.xml, 1)
        return self.toc


def subst_1(pattern, replacement, lines, ignore=None):
  for line in lines:
    if ignore is None or not re.match(ignore, line):
      line = re.sub(pattern, replacement, line)
    yield line


def subst(pattern, replacement, lines, ignore=None):
  if isinstance(lines, str):
    return '\n'.join(subst_1(pattern, replacement, lines.split('\n'), ignore=ignore))
  else:
    return subst_1(pattern, replacement, lines, ignore=ignore)


from io import BytesIO


class epub2txt():
    def __init__(self, epubfile=None):
        self.epub = epubfile if epubfile != '-' else BytesIO(sys.stdin.buffer.read())
        self.epub_name = epubfile

    def convert(self):
        # print "Processing %s ..." % self.epub
        file = zipfile.ZipFile(self.epub, "r")
        # rootfile = ContainerParser(
        #     file.read("META-INF/container.xml")).parseContainer()
        # title, author, ncx = BookParser(file.read(rootfile)).parseBook()
        # ops = "/".join(rootfile.split("/")[:-1])
        # if ops != "":
        #     ops = ops+"/"
        # toc = TocParser(file.read(ops + ncx)).parseToc()
        files = {x.filename: file.read(x).decode('utf8') for x in file.filelist if x.filename.endswith('htm') or x.filename.endswith('html')}
        from natsort import natsorted
        import json
        file_order = natsorted(list(files.keys()))

        import ftfy
        def fix_text(text):
          text = ftfy.fix_text(text)
          # replace unicode … with ... which ftfy doesn't do by default
          # NOTE: this departs from openai's convention of calling
          # ftfy.fix_text() with default arguments. In particular,
          # OpenAI's GPT-2 models do generate unicode ellipses.
          # Nonetheless, we replace unicdoe ellipses with ... to
          # increase the chances of semantic understanding.
          text = text.replace('…', '...')
          return text


        content = []
        for xmlfile in file_order:
          html = files[xmlfile]
          if not args.quiet:
            sys.stderr.write(self.epub_name+'/'+xmlfile + '\n')
          h = html2text.HTML2Text()
          h.body_width = 0
          text = h.handle(html)
          if not text.endswith('\n'):
            text += '\n'
          text = fix_text(text)
          filename = self.epub_name+'/'+xmlfile
          #name, ext = os.path.splitext(filename)
          bookname = filename + '.md'
          if not args.no_metadata:
            content.append('<|file name={}|>'.format(json.dumps(bookname)) + '\n')
          content.append(text)
          if not args.no_metadata:
            content.append('<|/file name={}|>'.format(json.dumps(bookname)) + '\n')

        file.close()
        result = ''.join(content)
        # final postprocessing fixups: tables come out all weird, so
        # fix them with a hack.
        result = result.replace('\n\n| \n\n', ' | ')

        if args.ftfy:
          import ftfy
          result = ftfy.fix_text(result)
          # replace unicode … with ... which ftfy doesn't do by default
          # NOTE: this departs from openai's convention of calling
          # ftfy.fix_text() with default arguments. In particular,
          # OpenAI's GPT-2 models do generate unicode ellipses.
          # Nonetheless, we replace unicdoe ellipses with ... to
          # increase the chances of semantic understanding.
          result = result.replace(' …', '...') # first pass: convert "foo  …" to "foo..."
          #result = result.replace(' …', '...') # second pass: convert "foo …" to "foo..."
          result = result.replace('…', '...') # final pass: convert "foo…" to "foo..."

        result = result.split('\n') # split into lines for performance in the following sections.

        ignore_ul_item = r'[*]\s'
        ignore_ol_item = r'[0-9]+[.]\s'
        ignore_li = '(?!(' + ignore_ul_item + ')|(' + ignore_ol_item + '))'
        ignore_code='^[ ]{4,}' + ignore_li + r'[^\s]'

        def sub(pattern, replacement, text):
          return subst(pattern, replacement, text, ignore=ignore_code)

        if args.plain_text:
          #result = unmark(result)
          # get rid of images
          result = sub('[!]\s*[\[].*?[\]][(].*?[)]', ' ', result)
          # remove reference links, e.g.  [3](e9781429926119_bm01.html#end_en12)
          result = sub('\[([0-9]+?)\][(].*?[)]', '', result)
          # replace [foo](www.example.com) with foo
          result = sub('[!]?\[(.*?)\][(].*?[)]', r'\1', result)

        # convert lines back to text
        result = '\n'.join(result)

        if not args.no_collapse_blanks:
          # replace long runs of blank lines with three blank lines
          rx = re.compile(r'([\r\t ]*[\n]+){2,}', re.DOTALL)
          result = re.sub(rx, r'\n\n', result)

        # fix up cases like this:
        #
        #   ... some text...
        #   ## Chapter 1
        #
        # Put a newline before the "## Chapter 1", to have a blank
        # line before headings.
        result = re.sub(r'\n([^\n]+)[\n]#', r'\n\1\n\n#', result)

        # if not args.no_collapse_blanks:
        #   # replace long runs of blank lines with three blank lines
        #   rx = re.compile(r'([\r\t ]*[\n]+){3,}', re.DOTALL)
        #   result = re.sub(rx, r'\n\n\n', result)

        if args.append is not None:
          append = str.encode(args.append).decode('unicode-escape')
          result += append
          
        return result


# https://stackoverflow.com/questions/761824/python-how-to-convert-markdown-formatted-text-to-text

from markdown import Markdown
from io import StringIO


def unmark_element(element, stream=None):
    if stream is None:
        stream = StringIO()
    if element.text:
        stream.write(element.text)
    for sub in element:
        unmark_element(sub, stream)
    if element.tail:
        stream.write(element.tail)
    return stream.getvalue()


def unmark(text):
    # patching Markdown
    Markdown.output_formats["plain"] = unmark_element
    __md = Markdown(output_format="plain")
    __md.stripTopLevelTags = False
    return __md.convert(text)


#==============================================================================
# Cmdline
#==============================================================================
import argparse

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, 
    description="""
TODO
""")
     
parser.add_argument('infile', default='-', nargs='?')
parser.add_argument('outfile', default='-', nargs='?')

parser.add_argument('-v', '--verbose',
    action="store_true",
    help="verbose output" )

parser.add_argument('-n', '--no-metadata',
    action="store_true",
    help="Don't output <|file name=...|>" )

parser.add_argument('-f', '--ftfy',
    action="store_true",
    help="Run text through ftfy.fix_text()" )

parser.add_argument('-a', '--append',
    default=None,
    help="Append this string to the end of the text (useful for adding <|endoftext|>)")

parser.add_argument('-p', '--plain-text',
    action="store_true",
    help="Convert markdown to plain text")
     
parser.add_argument('-q', '--quiet',
    action="store_true",
    help="Don't output ToC info to stderr")

parser.add_argument('-nc', '--no-collapse-blanks',
    action="store_true",
    help="Don't collapse long runs of blank lines into three blank lines" )

args = None


def main():
    global args
    if not args:
        args, leftovers = parser.parse_known_args()
        args.args = leftovers
    # args = sys.argv[1:]
    # infile = args[0]
    # outfile = args[1] if len(args) > 1 else '-'
    # filenames = glob(infile) if '*' in infile else [infile]
    filenames = glob(args.infile) if '*' in args.infile else [args.infile]
    out = None
    for filename in filenames:
        txt = epub2txt(filename).convert()
        if len(txt.strip()) > 0:
          if out is None:
            out = open(args.outfile, "w") if args.outfile is not '-' else sys.stdout
          out.write(txt)
          out.flush()

if __name__ == "__main__":
  main()

# TODO: Look into this bug: https://i.imgur.com/zDora9Y.png
